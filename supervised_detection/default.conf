{
  # id of the experiment
  id: default
  # num of rounds to run the experiment for
  num_runs: 10
  # number of clients
  num_clients: 10
  # number of the run (to be able to run multiple experiments at the same time)
  run_id: null
  # Whether to run experiment locally as well
  evaluate_local_setting: True
  # setting of the experiment - federated, centralized, local
  setting: federated
  # number of days
  days: 4
  # path to the data directory
  data_dir: ../data/Processed
  # directory where to output results and models
  output_dir: ../experiments
  # ip address of the server
  ip_address: 0.0.0.0
  # port of the server
  port: 8000
  # random seed
  seed: 1337
  # load previous day model
  load_model: True
  # number of clients to evaluate on
  num_evaluate_clients: 10
  # Whether to fit on client if they have no malware
  fit_if_no_malware: True
  malware_dirs: {
    M1: CTU-Malware-Capture-Botnet-346-1 # 5 days, ~50 vectors
    M2: CTU-Malware-Capture-Botnet-327-2 # 5 days, ~70 vectors
    M3: CTU-Malware-Capture-Botnet-230-1 # 1 day, 4 vectors
    M4: CTU-Malware-Capture-Botnet-67-1 # 5 days, ~100 vectors
    M5: CTU-Malware-Capture-Botnet-219-2 # 1 day, 30 vectors
    M6: CTU-Malware-Capture-Botnet-246-1 # 5 days, ~100 vectors
  }

  model: {
    type: SimpleClassifier
    # learning rate used for local training
    learning_rate: 1e-3
    # Disable classifier head of the model
    disable_classifier: False
    # Disable recostruction loss (efectively disables the decoder of the AE)
    disable_reconstruction: False
    # Enable proximal loss (to penalize divergence from global model)
    proximal: True
    # Use variational auto-encoder
    variational: False
    # multiplication parameter of the proximal loss
    mu: 0.1
    # hidden layers of the classifier head
    classifier_hidden: 5
    # latent dimension of the autoencoder
    latent_dim: 10
    # Which optimizer the model uses
    optimizer: SGD
    # The number of input features
    input_size: 36
    dropout: 0.5
  }
  server: {
    # Server-side learning rate
    learning_rate: 1e-3
    # Number of rounds on the first day
    num_rounds_first_day: 25
    # Number of rounds on successive day
    num_rounds_other_days: 10
    # -1 is the default value, for round one and two, two local epochs
    local_epochs: {-1: 5, 1: 1, 2: 2, 3: 3}
    vaccine_malware: [M4_1, M2_2, M1_3, M6_4]
    # vaccine_malware: [
    #   [M1_1, M2_1, M3_1, M5_1, M6_1],
    #   [M1_2, M2_2, M3_2, M5_2, M6_2],
    #   [M1_3, M2_3, M3_3, M5_3, M6_3],
    #   [M1_4, M2_4, M3_4, M5_4, M6_4]
    # ]
    # holdout_malware: [
    #   [M4_1],
    #   [M4_2],
    #   [M4_3],
    #   [M4_4]
    # ]
  }
  client: {
    # Size ratio of the validation dataset
    val_ratio: 0.2
    # Batch size
    batch_size: 64

    proxy_radius_mult: 1.1

    client_train_data: {
        1: [[1_1], [1_2], [1_3], [1_4]],
        2: [[2_1], [2_2], [2_3], [2_4]],
        3: [[3_1], [3_2], [3_3], [3_4]],
        4: [[4_1], [4_2], [4_3], [4_4]],
        5: [[5_1], [5_2], [5_3], [5_4]],
        6: [[6_1], [6_2], [6_3], [6_4]],
        7: [[7_1], [7_2], [7_3], [7_4]],
        8: [[8_1], [8_2], [8_3], [8_4]],
        9: [[9_1], [9_2], [9_3], [9_4]],
        10: [[10_1], [10_2], [10_3], [10_4]]
    }

    client_test_data: {
        1: [[1_2], [1_3], [1_4], [1_5]],
        2: [[2_2], [2_3], [2_4], [2_5]],
        3: [[3_2], [3_3], [3_4], [3_5]],
        4: [[4_2], [4_3], [4_4], [4_5]],
        5: [[5_2], [5_3], [5_4], [5_5]],
        6: [[6_2], [6_3], [6_4], [6_5]],
        7: [[7_2], [7_3], [7_4], [7_5]],
        8: [[8_2], [8_3], [8_4], [8_5]],
        9: [[9_2], [9_3], [9_4], [9_5]],
        10: [[10_2], [10_3], [10_4], [10_5]]
    }

    client_train_malware: {
        1: [[M1_1], [M1_2], [M1_3], [M1_4]],
        2: [[M2_1], [M2_2], [M2_3], [M2_4]],
        3: [[M3_1], [M3_2], [M3_3], [M3_4]],
        4: [[M4_1], [M4_2], [M4_3], [M4_4]],
        5: [[M5_1], [M5_2], [M5_3], [M5_4]],
        6: [[M6_1], [M6_2], [M6_3], [M6_4]],
    }

    client_test_malware: {
        1: [[M1_2], [M1_3], [M1_4], [M1_5]],
        2: [[M2_2], [M2_3], [M2_4], [M2_5]],
        3: [[M3_2], [M3_3], [M3_4], [M3_5]],
        4: [[M4_2], [M4_3], [M4_4], [M4_5]],
        5: [[M5_2], [M5_3], [M5_4], [M5_5]],
        6: [[M6_2], [M6_3], [M6_4], [M6_5]],
    }
    # Whether to use vaccine dataset, if client has it's own malware
    use_vaccine_if_own: True
  }
}